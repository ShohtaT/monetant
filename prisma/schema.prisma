// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  auth_id       String    @unique
  nickname      String
  email         String    @unique
  last_login_at DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  created_payments Payment[]     @relation("PaymentCreator")
  debt_relations   DebtRelation[]

  @@map("users")
}

model Payment {
  id         Int      @id @default(autoincrement())
  title      String
  amount     Int      // 支払いの総額（単位：円）
  note       String?  @db.Text
  status     String   @default("AWAITING") // AWAITING, COMPLETED
  creator_id Int
  paid_at    DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  creator        User           @relation("PaymentCreator", fields: [creator_id], references: [id])
  debt_relations DebtRelation[]

  @@map("payments")
}

model DebtRelation {
  id           Int       @id @default(autoincrement())
  split_amount Int       // 分割された金額（単位：円）
  status       String    @default("AWAITING") // AWAITING, COMPLETED
  payment_id   Int
  debtor_id    Int
  paid_at      DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  payment Payment @relation(fields: [payment_id], references: [id])
  debtor User    @relation(fields: [debtor_id], references: [id])

  @@map("debt_relations")
}
