// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  auth_id       String   @unique
  nickname      String
  email         String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  payments      Payment[]
  debtRelations DebtRelation[]

  @@map("users")
}

model Payment {
  id          Int      @id @default(autoincrement())
  title       String
  amount      Int
  note        String?
  status      PaymentStatus @default(AWAITING)
  creator_id  Int
  payment_at  DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  creator       User @relation(fields: [creator_id], references: [id])
  debtRelations DebtRelation[]

  @@map("payments")
}

model DebtRelation {
  id           Int      @id @default(autoincrement())
  payment_id   Int
  payee_id     Int
  status       PaymentStatus @default(AWAITING)
  split_amount Int
  paid_at      DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  payment Payment @relation(fields: [payment_id], references: [id])
  payee   User    @relation(fields: [payee_id], references: [id])

  @@map("debt_relations")
}

enum PaymentStatus {
  AWAITING
  COMPLETED
}
